#include <iostream>

using namespace std;

// Base Class
class Shape
{
    public:
    // pure virtual function providing interface framework
    virtual int getArea() = 0;
    void setWidth(int w)
    {
        width = w;
    }

    void setHeight(int h)
    {
        height = h;
    }

    void setRadius(int r)
    {
        radius = r;
    }

    protected:
    int width;
    int height;
    int radius;

};

class Triangle: public Shape
{
    public:
    int getArea()
    {
        return(width*height)/2;
    }
};

class Rectangle: public Shape
{
    public:
    int getArea()
    {
        return(width*height);
    }
};

class Circle: public Shape
{
    public:
    int getArea()
    {
        return 3.14*radius*radius;
    }
};

int main()
{
   Triangle Tri;
   Rectangle Rec;
   Circle Circ;

   Tri.setWidth(5);
   Tri.setHeight(7);

   Rec.setWidth(4);
   Rec.setHeight(6);

   Circ.setRadius(5);

   cout<<"Total Triangle area:" << Tri.getArea() << endl;
   cout<<"Total Rectangle area:" << Rec.getArea() << endl;
   cout<<"Total Circle area:" << Circ.getArea() << endl;

   cout<<"Total Shape area:" << Circ.getArea() + Rec.getArea() + Tri.getArea()<< endl;

    return 0;
}
